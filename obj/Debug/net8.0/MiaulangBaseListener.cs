//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\src\miaulang\miaulang\Miaulang.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace miaulang {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiaulangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiaulangBaseListener : IMiaulangListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>bonkCommand</c>
	/// labeled alternative in <see cref="MiaulangParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBonkCommand([NotNull] MiaulangParser.BonkCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bonkCommand</c>
	/// labeled alternative in <see cref="MiaulangParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBonkCommand([NotNull] MiaulangParser.BonkCommandContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>callCommand</c>
	/// labeled alternative in <see cref="MiaulangParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallCommand([NotNull] MiaulangParser.CallCommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>callCommand</c>
	/// labeled alternative in <see cref="MiaulangParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallCommand([NotNull] MiaulangParser.CallCommandContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>invokeExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvokeExpression([NotNull] MiaulangParser.InvokeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>invokeExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvokeExpression([NotNull] MiaulangParser.InvokeExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] MiaulangParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] MiaulangParser.NotExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExpression([NotNull] MiaulangParser.ParenthesisExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExpression([NotNull] MiaulangParser.ParenthesisExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPowerExpression([NotNull] MiaulangParser.PowerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPowerExpression([NotNull] MiaulangParser.PowerExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>multExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultExpression([NotNull] MiaulangParser.MultExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultExpression([NotNull] MiaulangParser.MultExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddExpression([NotNull] MiaulangParser.AddExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddExpression([NotNull] MiaulangParser.AddExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>compareExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompareExpression([NotNull] MiaulangParser.CompareExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>compareExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompareExpression([NotNull] MiaulangParser.CompareExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExpression([NotNull] MiaulangParser.BoolExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExpression([NotNull] MiaulangParser.BoolExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.script"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScript([NotNull] MiaulangParser.ScriptContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.script"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScript([NotNull] MiaulangParser.ScriptContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] MiaulangParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] MiaulangParser.LineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCommand([NotNull] MiaulangParser.CommandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.command"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCommand([NotNull] MiaulangParser.CommandContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MiaulangParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MiaulangParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] MiaulangParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] MiaulangParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue([NotNull] MiaulangParser.ValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue([NotNull] MiaulangParser.ValueContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.invoke"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvoke([NotNull] MiaulangParser.InvokeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.invoke"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvoke([NotNull] MiaulangParser.InvokeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgs([NotNull] MiaulangParser.ArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgs([NotNull] MiaulangParser.ArgsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiaulangParser.invokeArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvokeArgs([NotNull] MiaulangParser.InvokeArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiaulangParser.invokeArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvokeArgs([NotNull] MiaulangParser.InvokeArgsContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace miaulang
