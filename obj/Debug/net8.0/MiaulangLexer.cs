//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\src\miaulang\miaulang\Miaulang.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace miaulang {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiaulangLexer : Lexer {
	public const int
		STRING=1, INTEGER=2, IDENTIFIER=3, L_PARENTHESIS=4, R_PARENTHESIS=5, POWER_OP=6, 
		MULT_OP=7, ADD_OP=8, COMPARE_OP=9, BOOL_OP=10, NOT=11, BONK=12, CAT=13, 
		DOT=14, COMMA=15, EQUALSIGN=16, END=17, FI=18, WS=19, ANY=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STRING", "INTEGER", "IDENTIFIER", "L_PARENTHESIS", "R_PARENTHESIS", "POWER_OP", 
		"MULT_OP", "ADD_OP", "COMPARE_OP", "BOOL_OP", "NOT", "BONK", "CAT", "DOT", 
		"COMMA", "EQUALSIGN", "END", "FI", "WS", "ANY"
	};


	public MiaulangLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'('", "')'", "'^'", null, null, null, null, "'not'", 
		"'bonk'", "'cat'", "'.'", "','", "'='", "'end'", "'fi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "INTEGER", "IDENTIFIER", "L_PARENTHESIS", "R_PARENTHESIS", 
		"POWER_OP", "MULT_OP", "ADD_OP", "COMPARE_OP", "BOOL_OP", "NOT", "BONK", 
		"CAT", "DOT", "COMMA", "EQUALSIGN", "END", "FI", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Miaulang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x16\x8C\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x3\x2\x3\x2\a\x2.\n\x2\f\x2\xE\x2\x31\v\x2\x3\x2\x3\x2\x3\x3\x6"+
		"\x3\x36\n\x3\r\x3\xE\x3\x37\x3\x4\x6\x4;\n\x4\r\x4\xE\x4<\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x5\nS\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vh\n\v\x3"+
		"\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x14\x6\x14\x85\n\x14\r\x14\xE\x14\x86\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x2\x2\x2\x16\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r"+
		"\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF"+
		"\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16\x3\x2"+
		"\b\x3\x2$$\x3\x2\x32;\x5\x2\x43\\\x61\x61\x63|\x5\x2\'\',,\x31\x31\x4"+
		"\x2--//\x5\x2\v\f\xF\xF\"\"\x99\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2"+
		"\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2"+
		"\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2"+
		"\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2"+
		"\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x3+\x3\x2\x2\x2\x5\x35\x3\x2\x2\x2"+
		"\a:\x3\x2\x2\x2\t>\x3\x2\x2\x2\v@\x3\x2\x2\x2\r\x42\x3\x2\x2\x2\xF\x44"+
		"\x3\x2\x2\x2\x11\x46\x3\x2\x2\x2\x13R\x3\x2\x2\x2\x15g\x3\x2\x2\x2\x17"+
		"i\x3\x2\x2\x2\x19m\x3\x2\x2\x2\x1Br\x3\x2\x2\x2\x1Dv\x3\x2\x2\x2\x1Fx"+
		"\x3\x2\x2\x2!z\x3\x2\x2\x2#|\x3\x2\x2\x2%\x80\x3\x2\x2\x2\'\x84\x3\x2"+
		"\x2\x2)\x8A\x3\x2\x2\x2+/\a$\x2\x2,.\n\x2\x2\x2-,\x3\x2\x2\x2.\x31\x3"+
		"\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32\x3\x2\x2\x2\x31/\x3\x2"+
		"\x2\x2\x32\x33\a$\x2\x2\x33\x4\x3\x2\x2\x2\x34\x36\t\x3\x2\x2\x35\x34"+
		"\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2"+
		"\x2\x38\x6\x3\x2\x2\x2\x39;\t\x4\x2\x2:\x39\x3\x2\x2\x2;<\x3\x2\x2\x2"+
		"<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\b\x3\x2\x2\x2>?\a*\x2\x2?\n\x3\x2\x2\x2"+
		"@\x41\a+\x2\x2\x41\f\x3\x2\x2\x2\x42\x43\a`\x2\x2\x43\xE\x3\x2\x2\x2\x44"+
		"\x45\t\x5\x2\x2\x45\x10\x3\x2\x2\x2\x46G\t\x6\x2\x2G\x12\x3\x2\x2\x2H"+
		"I\a?\x2\x2IS\a?\x2\x2JK\a#\x2\x2KS\a?\x2\x2LS\a@\x2\x2MN\a@\x2\x2NS\a"+
		"?\x2\x2OS\a>\x2\x2PQ\a>\x2\x2QS\a?\x2\x2RH\x3\x2\x2\x2RJ\x3\x2\x2\x2R"+
		"L\x3\x2\x2\x2RM\x3\x2\x2\x2RO\x3\x2\x2\x2RP\x3\x2\x2\x2S\x14\x3\x2\x2"+
		"\x2TU\aq\x2\x2Uh\at\x2\x2VW\az\x2\x2WX\aq\x2\x2Xh\at\x2\x2YZ\ap\x2\x2"+
		"Z[\aq\x2\x2[h\at\x2\x2\\]\az\x2\x2]^\ap\x2\x2^_\aq\x2\x2_h\at\x2\x2`\x61"+
		"\a\x63\x2\x2\x61\x62\ap\x2\x2\x62h\a\x66\x2\x2\x63\x64\ap\x2\x2\x64\x65"+
		"\a\x63\x2\x2\x65\x66\ap\x2\x2\x66h\a\x66\x2\x2gT\x3\x2\x2\x2gV\x3\x2\x2"+
		"\x2gY\x3\x2\x2\x2g\\\x3\x2\x2\x2g`\x3\x2\x2\x2g\x63\x3\x2\x2\x2h\x16\x3"+
		"\x2\x2\x2ij\ap\x2\x2jk\aq\x2\x2kl\av\x2\x2l\x18\x3\x2\x2\x2mn\a\x64\x2"+
		"\x2no\aq\x2\x2op\ap\x2\x2pq\am\x2\x2q\x1A\x3\x2\x2\x2rs\a\x65\x2\x2st"+
		"\a\x63\x2\x2tu\av\x2\x2u\x1C\x3\x2\x2\x2vw\a\x30\x2\x2w\x1E\x3\x2\x2\x2"+
		"xy\a.\x2\x2y \x3\x2\x2\x2z{\a?\x2\x2{\"\x3\x2\x2\x2|}\ag\x2\x2}~\ap\x2"+
		"\x2~\x7F\a\x66\x2\x2\x7F$\x3\x2\x2\x2\x80\x81\ah\x2\x2\x81\x82\ak\x2\x2"+
		"\x82&\x3\x2\x2\x2\x83\x85\t\a\x2\x2\x84\x83\x3\x2\x2\x2\x85\x86\x3\x2"+
		"\x2\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88"+
		"\x89\b\x14\x2\x2\x89(\x3\x2\x2\x2\x8A\x8B\v\x2\x2\x2\x8B*\x3\x2\x2\x2"+
		"\t\x2/\x37<Rg\x86\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace miaulang
